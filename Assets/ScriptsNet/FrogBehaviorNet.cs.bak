using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Unity.Netcode;
using UnityEngine.Networking;

public class FrogBehaviorNet : NetworkBehaviour
{
    // Start is called before the first frame update
    private Rigidbody2D Rigidbody;
    private const float Speed=5.0f;
    public  float JumpForce=8.0f;
    public Vector3 SpawnPoint;
    private const float ShootPlace = 0.3f;
    private NetworkVariable<int> FaceDirection= new NetworkVariable<int>(1,NetworkVariableReadPermission.Everyone,NetworkVariableWritePermission.Owner);
    private SpriteRenderer SpriteRenderer;
    private OnGroundDector OngroundDector;
    private GameObject playerPrefab;
    // private int respawnTimes = 5;
    // private int respawnCount = 0;
    private const float DeathHight= -22f;
    public ParticleSystem playerPS;
    public AudioSource AudioSource;
    public AudioClip jump, die;
    private int moveFlag = 0;
    //public MaskDudeBehavior BoundedDieObject;
    void Awake()
    {
        Rigidbody=GetComponent<Rigidbody2D>();
        SpriteRenderer=GetComponent<SpriteRenderer>();
        OngroundDector=GetComponent<OnGroundDector>();
        AudioSource = GetComponent<AudioSource>();
    }
     void OnCollisionEnter2D(Collision2D collision){
        Debug.Log("collision happen");
        if(collision.gameObject.CompareTag("Spike")) BoundedDie();
        if(collision.gameObject.CompareTag("Particle")) BoundedDie();
    }
    void Update()
    {
        MoveALittleBit();
        Move();
        JumpDetect();
        if(transform.position.y<DeathHight) BoundedDie();
    }
    void Move(){
        if(IsOwner){
            Vector2 p=transform.position;
            if(Input.GetKey(KeyCode.L)){
                FaceDirection.Value=1;
                //SpriteRenderer.flipX=false;
                p.x+=(int)FaceDirection.Value*Speed*Time.deltaTime;
            }
            else if(Input.GetKey(KeyCode.J)){
                FaceDirection.Value=-1;
                //SpriteRenderer.flipX=true;
                p.x+=(int)FaceDirection.Value*Speed*Time.deltaTime;
            }
            transform.position=p;
        }
        if(FaceDirection.Value == 1) SpriteRenderer.flipX=false;
        else SpriteRenderer.flipX=true;
    }
    void JumpDetect(){
        if(!IsHost){
            if((Input.GetKeyDown(KeyCode.I))){
                if(OngroundDector.TestOnGround()){
                    JumpServerRpc();
                    Rigidbody.AddForce(transform.up*JumpForce,ForceMode2D.Impulse);
                    AudioSource.clip = jump;
                    AudioSource.Play();
                }
                //Debug.Log("ForceAdded");
            }
        }
        ParticleSystem();
    }
    public void Die(){
        AudioSource.clip = die;
        AudioSource.Play();
        transform.position=SpawnPoint;
        Rigidbody.velocity=Vector3.zero;
    }
    private void MoveALittleBit(){
        if(moveFlag == 0)
            transform.position += new Vector3(0.0011f, 0.0011f, 0);
        else
            transform.position -= new Vector3(0.0011f, 0.0011f, 0);
        moveFlag = 1 - moveFlag;
    }
    
    [ServerRpc]
    private void JumpServerRpc(){
        GameObject Guy = GameObject.Find("MaskDude(Clone)");
        if(Guy.GetComponent<OnGroundDector>().TestOnGround())
        {
            Guy.GetComponent<Rigidbody2D>().AddForce(transform.up*JumpForce,ForceMode2D.Impulse);
            Guy.GetComponent<MaskDudeBehaviorNet>().AudioSource.clip = Guy.GetComponent<MaskDudeBehaviorNet>().jump;
            Guy.GetComponent<MaskDudeBehaviorNet>().AudioSource.Play();
        }
    }

    private void BoundedDie(){
        Debug.Log("BoundedDie called " + "IsOwner: "+IsOwner.ToString());
        if(IsOwner){
            Die();
            BoundedDieServerRpc();
        }
    }

    [ServerRpc]
    private void BoundedDieServerRpc(){
        Debug.Log("BoundedDieServerRpc called");
        GameObject Guy = GameObject.Find("MaskDude(Clone)");
        Guy.GetComponent<MaskDudeBehaviorNet>().Die();
    }

    private void SceneManager_OnSceneEvent(SceneEvent sceneEvent){
        Debug.Log($"Scene event {sceneEvent.SceneEventType} " +
                $"for scene {sceneEvent.SceneName} ");
        switch (sceneEvent.SceneEventType)
        {
        case SceneEventType.LoadComplete:
            {
                switch(sceneEvent.SceneName){
                    case("Level_1_Net"):{
                        Debug.Log("Level 1 loaded " + "sceneEventClientID: "+sceneEvent.ClientId.ToString()+"IsHost: "+IsHost.ToString()+"OwnerClientId: "+OwnerClientId.ToString());
                        if(OwnerClientId == 1){
                            if(sceneEvent.ClientId == 0 && IsHost) gameObject.GetComponent<SpriteRenderer>().enabled = true;
                            if(sceneEvent.ClientId == 1 && !IsHost) {
                                gameObject.GetComponent<SpriteRenderer>().enabled = true;
                                //获取场景中名为camera1的对象
                                GameObject camera = GameObject.Find("Main Camera");
                                camera.GetComponent<Camera>().enabled = false;
                                camera = GameObject.Find("Camera1");
                                camera.GetComponent<CameraFollow>().target = gameObject.transform;
                                GameObject obj = GameObject.Find("MaskDude");
                                obj.SetActive(false);
                            }
                        }
                        if(IsHost){
                            if(sceneEvent.ClientId == 0 && IsOwner){
                                GameObject hero = Instantiate(Resources.Load("Prefabs/MaskDude") as GameObject);
                                hero.GetComponent<NetworkObject>().Spawn(true);
                                hero.transform.position = new Vector3(-37f,-3.5f,0);
                                GameObject camera = GameObject.Find("Camera1");
                                camera.GetComponent<Camera>().enabled = false;
                                camera = GameObject.Find("Main Camera");
                                camera.GetComponent<CameraFollow>().target = hero.transform;
                                GameObject obj = GameObject.Find("NinjaFrog");
                                obj.SetActive(false);
                                if(!IsOwner){
                                    Debug.Log("owner: "+OwnerClientId.ToString()+"ishost: "+IsHost.ToString());
                                    //gameObject.GetComponent<SpriteRenderer>().enabled = true;
                                }
                            }
                            else{
                            }
                        }
                        else{
                            if(sceneEvent.ClientId == 1){
                                if(IsOwner){
                                    transform.position = new Vector3(-12.74f,-3.69f,0);
                                    Debug.Log("owner: "+OwnerClientId.ToString()+"ishost: "+IsHost.ToString());
                                    //gameObject.GetComponent<SpriteRenderer>().enabled = true;
                                }
                            }
                        }
                        break;
                    }
                }
                break;
            }
        // Handle Client to Server Unload Complete Notification(s)
        case SceneEventType.UnloadComplete:
            {
                switch(sceneEvent.SceneName){
                    case("NetworkStartPage"):{
                        Debug.Log("NetworkStartPage Unloaded " + sceneEvent.ClientId.ToString());
                        if(IsHost){
                            if(sceneEvent.ClientId == 0){
                                if(IsOwner){
                                    gameObject.GetComponent<NetworkObject>().Despawn(true);
                                }
                            }
                        }
                        break;
                    }
                }
                break;
            }
        // Handle Server to Client Load Complete (all clients finished loading notification)
        case SceneEventType.LoadEventCompleted:
            {
                // This will let you know when all clients have finished loading a scene
                // Received on both server and clients
                foreach (var clientId in sceneEvent.ClientsThatCompleted)
                {
                    // Example of parsing through the clients that completed list
                    if (IsServer)
                    {
                        // Handle any server-side tasks here
                    }
                    else
                    {
                        // Handle any client-side tasks here
                    }
                }
                break;
            }
        // Handle Server to Client unload Complete (all clients finished unloading notification)
        case SceneEventType.UnloadEventCompleted:
            {
                // This will let you know when all clients have finished unloading a scene
                // Received on both server and clients
                foreach (var clientId in sceneEvent.ClientsThatCompleted)
                {
                    // Example of parsing through the clients that completed list
                    if (IsServer)
                    {
                        // Handle any server-side tasks here
                    }
                    else
                    {
                        // Handle any client-side tasks here
                    }
                }
                break;
            }
        }
    }

    public override void OnNetworkSpawn()
    {
        Debug.Log("OnNetworkSpawn");
        //playerPrefab = NetworkManager.Singleton.NetworkConfig.PlayerPrefab;

        //playerPrefab = GameObject.Find("NinjaFrog(Clone)");
        //playerPrefab.GetComponent<SpriteRenderer>().enabled = false;

        gameObject.GetComponent<SpriteRenderer>().enabled = false;

        // playerPrefab.GetComponent<NetworkObject>().NetworkHide(0);
        // playerPrefab.GetComponent<NetworkObject>().NetworkHide(1);
        //Debug.Log("OwnerClientId: " + OwnerClientId.ToString() + "Spawn");
        Debug.Log("OnSceneEventHooked");
        NetworkManager.Singleton.SceneManager.OnSceneEvent += SceneManager_OnSceneEvent;
        //NetworkServer.RegisterHandler(MsgType.Connect, OnPlayerConnected);
    }
    
    void ParticleSystem()
    {
        playerPS.Play();
    }
}
